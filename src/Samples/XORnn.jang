class Perceptron {
    init(int[] weights, int bias, int size) {
        make int me.bias be bias;
        make int[] me.weights be weights;
        make int me.size be size;
    }

    julio wants int stepf(int input) {
        is input < 0 fr {
            julio gets 0;
        }
        julio gets 1;
    }

    julio wants int sumInputs(int[] inpArr) {
        make int sum be me.bias;
        for index in range(me.size) {
            change sum to sum + (me.weights[index] * inpArr[index]);
        }
        julio gets sum;
    }

    julio wants int feedThrough(int[] inpArr) {
        make int out be me.sumInputs(inpArr);
        change out to me.stepf(out);
        julio gets out;
    }
}

class HiddenLayer {
    init(int size, int[] weights, int[] biases) {
        make perceptron[] me.perceptrons;
        make me.size be size;
        for index in range(size) {
            change me.perceptrons[index] to new perceptron(weights[index], biases[index. size]);
        }
    }

    julio wants int[] feedThrough(inpArr) {
        make int[] out;
        make int temp be 0;
        make int count be 0;
        for pt in me.perceptrons {
            change temp to pt.feedThrough(inpArr);
            chnage out[count] to temp;
            change count to count + 1;
        }
        julio gets out;
    }
}

make perceptron output be new perceptron([-1,1], -.5, 2);
make HiddenLayer hl be new HiddenLayer(2, [[1,1],[1,1]], [-1.5, -.5]);
make int hlOut be hl.feedThrough([0,0]);
change hlOut to output.feedThrough(hlOut);
julio says hlOut;